// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dataNode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InformarJugadasClient is the client API for InformarJugadas service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InformarJugadasClient interface {
	InfoJugadas(ctx context.Context, in *InfoJugada, opts ...grpc.CallOption) (*Registro, error)
}

type informarJugadasClient struct {
	cc grpc.ClientConnInterface
}

func NewInformarJugadasClient(cc grpc.ClientConnInterface) InformarJugadasClient {
	return &informarJugadasClient{cc}
}

func (c *informarJugadasClient) InfoJugadas(ctx context.Context, in *InfoJugada, opts ...grpc.CallOption) (*Registro, error) {
	out := new(Registro)
	err := c.cc.Invoke(ctx, "/protodatanode.informarJugadas/infoJugadas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InformarJugadasServer is the server API for InformarJugadas service.
// All implementations must embed UnimplementedInformarJugadasServer
// for forward compatibility
type InformarJugadasServer interface {
	InfoJugadas(context.Context, *InfoJugada) (*Registro, error)
	mustEmbedUnimplementedInformarJugadasServer()
}

// UnimplementedInformarJugadasServer must be embedded to have forward compatible implementations.
type UnimplementedInformarJugadasServer struct {
}

func (UnimplementedInformarJugadasServer) InfoJugadas(context.Context, *InfoJugada) (*Registro, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoJugadas not implemented")
}
func (UnimplementedInformarJugadasServer) mustEmbedUnimplementedInformarJugadasServer() {}

// UnsafeInformarJugadasServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InformarJugadasServer will
// result in compilation errors.
type UnsafeInformarJugadasServer interface {
	mustEmbedUnimplementedInformarJugadasServer()
}

func RegisterInformarJugadasServer(s grpc.ServiceRegistrar, srv InformarJugadasServer) {
	s.RegisterService(&InformarJugadas_ServiceDesc, srv)
}

func _InformarJugadas_InfoJugadas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoJugada)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformarJugadasServer).InfoJugadas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protodatanode.informarJugadas/infoJugadas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformarJugadasServer).InfoJugadas(ctx, req.(*InfoJugada))
	}
	return interceptor(ctx, in, info, handler)
}

// InformarJugadas_ServiceDesc is the grpc.ServiceDesc for InformarJugadas service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InformarJugadas_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protodatanode.informarJugadas",
	HandlerType: (*InformarJugadasServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "infoJugadas",
			Handler:    _InformarJugadas_InfoJugadas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataNode/protodatanode/dataNode.proto",
}
